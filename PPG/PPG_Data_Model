{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"15WuYsS7noCFAkTBTAigYrpnLrcUFEPT2","authorship_tag":"ABX9TyMkocX6m33ZHS/n999Sh3Yt"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","import torchvision\n","from torchvision import transforms\n","import os\n","import cv2"],"metadata":{"id":"gMKMG_eVKTSz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["base_dir=r'/content/drive/MyDrive/PPG/PPG'"],"metadata":{"id":"fXxO5rRFe-M3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_dir = os.path.join(base_dir , 'train')#Test data set directory\n","test_dir = os.path.join(base_dir , 'test') #Directory of data sets to detect"],"metadata":{"id":"3GrnWr9Kd9Sw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["transform = transforms.Compose([\n","    transforms.Resize((192, 192)),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[.5, .5, .5], std=[.5, .5, .5])\n","])"],"metadata":{"id":"nkti0F3FeLnJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_ds =  torchvision.datasets.ImageFolder(\n","        train_dir,\n","        transform=transform\n","    )#Test data set\n","test_ds =  torchvision.datasets.ImageFolder(\n","        test_dir,\n","        transform=transform\n","    )#Detect the dataset and convert the image format into a dataset"],"metadata":{"id":"z5lDxwC4ep_-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["BTACH_SIZE = 32#Adjustable parameters,video memory is insufficient when the parameters must be adjusted\n","train_dl = torch.utils.data.DataLoader(\n","                      train_ds,\n","                      batch_size=BTACH_SIZE,\n","                      shuffle=True\n",")\n","test_dl = torch.utils.data.DataLoader(\n","                      test_ds,\n","                      batch_size=BTACH_SIZE,\n",")\n","#Select resnet18 for training\n","model = torchvision.models.resnet18(pretrained=True)"],"metadata":{"id":"20_ygnFzesj2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for param in model.parameters():\n","    param.requires_grad = False#All the above parameters remain unchanged\n","in_f = model.fc.in_features#Make sure the last parameter is passed in exactly\n","model.fc = nn.Linear(in_f, 6)#Replace the last fc layer,divided into four types\n","if torch.cuda.is_available():\n","    model.to('cuda')\n","loss_fn = nn.CrossEntropyLoss()\n","#Choose adam optimizer,choosethis is relatively high accuracy\n","optimizer = torch.optim.Adam(model.fc.parameters(), lr=0.0001)"],"metadata":{"id":"bY4nm8DBfdbP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#training\n","def fit(epoch, model, trainloader, testloader):\n","    correct = 0\n","    total = 0\n","    running_loss = 0\n","    model.train()\n","    for x, y in trainloader:\n","        if torch.cuda.is_available():\n","            x, y = x.to('cuda'), y.to('cuda')\n","        y_pred = model(x)\n","        loss = loss_fn(y_pred, y)\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","        with torch.no_grad():\n","            y_pred = torch.argmax(y_pred, dim=1)\n","            correct += (y_pred == y).sum().item()\n","            total += y.size(0)\n","            running_loss += loss.item()\n","    epoch_loss = running_loss / len(trainloader.dataset)\n","    epoch_acc = correct / total\n","        \n","        \n","    test_correct = 0\n","    test_total = 0\n","    test_running_loss = 0 \n","    \n","    model.eval()\n","    with torch.no_grad():\n","        for x, y in testloader:\n","            if torch.cuda.is_available():\n","                x, y = x.to('cuda'), y.to('cuda')\n","            y_pred = model(x)\n","            loss = loss_fn(y_pred, y)\n","            y_pred = torch.argmax(y_pred, dim=1)\n","            test_correct += (y_pred == y).sum().item()\n","            test_total += y.size(0)\n","            test_running_loss += loss.item()\n","    \n","    epoch_test_loss = test_running_loss / len(testloader.dataset)\n","    epoch_test_acc = test_correct / test_total\n","    \n","        \n","    print('epoch: ', epoch, \n","          'loss： ', round(epoch_loss, 3),\n","          'accuracy:', round(epoch_acc, 3),\n","          'test_loss： ', round(epoch_test_loss, 3),\n","          'test_accuracy:', round(epoch_test_acc, 3)\n","             )\n","        \n","    return epoch_loss, epoch_acc, epoch_test_loss, epoch_test_acc\n"," \n","epochs = 10\n"," \n","train_loss = []\n","train_acc = []\n","test_loss = []\n","test_acc = []\n"," \n","for epoch in range(epochs):\n","    epoch_loss, epoch_acc, epoch_test_loss, epoch_test_acc = fit(epoch,\n","                                     model,\n","                                     train_dl,\n","                                     test_dl)\n","    train_loss.append(epoch_loss)\n","    train_acc.append(epoch_acc)\n","    test_loss.append(epoch_test_loss)\n","    test_acc.append(epoch_test_acc)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TO9II8CafgAI","executionInfo":{"status":"ok","timestamp":1685717485945,"user_tz":-540,"elapsed":585318,"user":{"displayName":"당호연","userId":"00443455778656844380"}},"outputId":"a4095bb6-1e74-4b78-8849-46b7f3d1185c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["epoch:  0 loss：  0.056 accuracy: 0.232 test_loss：  0.066 test_accuracy: 0.269\n","epoch:  1 loss：  0.056 accuracy: 0.26 test_loss：  0.066 test_accuracy: 0.269\n","epoch:  2 loss：  0.056 accuracy: 0.232 test_loss：  0.066 test_accuracy: 0.269\n","epoch:  3 loss：  0.056 accuracy: 0.276 test_loss：  0.066 test_accuracy: 0.278\n","epoch:  4 loss：  0.056 accuracy: 0.276 test_loss：  0.066 test_accuracy: 0.269\n","epoch:  5 loss：  0.055 accuracy: 0.276 test_loss：  0.066 test_accuracy: 0.259\n","epoch:  6 loss：  0.056 accuracy: 0.236 test_loss：  0.066 test_accuracy: 0.269\n","epoch:  7 loss：  0.055 accuracy: 0.309 test_loss：  0.066 test_accuracy: 0.259\n","epoch:  8 loss：  0.055 accuracy: 0.289 test_loss：  0.066 test_accuracy: 0.259\n","epoch:  9 loss：  0.055 accuracy: 0.289 test_loss：  0.066 test_accuracy: 0.269\n","epoch:  10 loss：  0.055 accuracy: 0.305 test_loss：  0.066 test_accuracy: 0.269\n","epoch:  11 loss：  0.055 accuracy: 0.297 test_loss：  0.066 test_accuracy: 0.269\n","epoch:  12 loss：  0.055 accuracy: 0.309 test_loss：  0.066 test_accuracy: 0.269\n","epoch:  13 loss：  0.055 accuracy: 0.301 test_loss：  0.066 test_accuracy: 0.278\n","epoch:  14 loss：  0.055 accuracy: 0.325 test_loss：  0.066 test_accuracy: 0.269\n","epoch:  15 loss：  0.054 accuracy: 0.321 test_loss：  0.066 test_accuracy: 0.287\n","epoch:  16 loss：  0.054 accuracy: 0.346 test_loss：  0.066 test_accuracy: 0.287\n","epoch:  17 loss：  0.054 accuracy: 0.301 test_loss：  0.066 test_accuracy: 0.278\n","epoch:  18 loss：  0.054 accuracy: 0.329 test_loss：  0.066 test_accuracy: 0.296\n","epoch:  19 loss：  0.054 accuracy: 0.313 test_loss：  0.066 test_accuracy: 0.287\n"]}]}]}